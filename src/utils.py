"""
pravda
@license: GPLv3
"""

import argparse
import logging
import hashlib
import os.path
import sys

from random import choice
from string import ascii_letters, digits
from typing import List, Optional

from pytube import YouTube


def get_logger() -> logging.Logger:
    """ Returns looger. """

    logger = logging.getLogger('main')
    logger.setLevel(logging.DEBUG)

    # Create handler.
    handler = logging.StreamHandler(stream=sys.stdout)
    handler.setLevel(logging.DEBUG)

    # Create formatter.
    formatter = logging.Formatter('{"timestamp": "%(asctime)s", "level": "%(levelname)s", "msg": "%(message)s"}')

    # Add formatter to handler.
    handler.setFormatter(formatter)

    # Add handler to logger.
    logger.addHandler(handler)

    return logger


def get_args() -> argparse.Namespace:
    """ Returns parsed arguments. """

    parser = argparse.ArgumentParser(
        description='Pravda is a tool for hiding messages using steganography (LSB) '
                    'in stubtitles streams from YouTube videos or local MP4 files.'
    )

    parser.add_argument(
        '-i',
        '--input',
        help='Input vÃ­deo, URL from YouTube or MP4 local file.',
        type=str
    )

    parser.add_argument(
        '-l',
        '--lang',
        help='Subtitles languaje, for example "en", "es", etc.',
        type=str,
        default='a.en'  # Autogenerated English.
    )

    parser.add_argument(
        '-m',
        '--message',
        help='Message to hide.',
        type=str
    )

    parser.add_argument(
        '-r',
        '--read',
        help='Read mode.',
        action='store_true'
    )

    parser.add_argument(
        '-s',
        '--subtitle',
        help='Input subtitle (SRT) file.',
        type=str
    )

    parser.add_argument(
        '-w',
        '--write',
        help='Write mode.',
        action='store_true'
    )

    args = parser.parse_args()

    # Handle arguments errors.

    if not args.input:
        parser.error('You must specify an input video using the -i,--input argument.')

    if not args.write and not args.read:
        parser.error('Missing mandatory arguments -w,--write or -r,--read.')

    if args.write and not args.message:
        parser.error('Argument -m,--message it\'s mandatory in write mode.')

    if args.read and args.message:
        parser.error('Argument -m,--message can only be set in write mode.')

    return args


def sha_256(input_string: str) -> str:
    """
    Returns SHA-256 hash from input string.
    :param input_string: Input string
    """

    return hashlib.sha256(input_string.encode()).hexdigest()


def get_rand_chars(num_of_chars: int) -> str:
    """ Return string with N pseudo-random chars (ASCII letters & digits). """

    return ''.join([choice(ascii_letters + digits) for i in range(num_of_chars)])


def get_bits(msg: str) -> List[int]:
    """
    Convert input message to binary string and returns an array of bits.
    :param msg: Input message.
    """

    bits = []
    for char in msg:
        byte_char = f'{ord(char):08b}'
        for bit in byte_char:
            bits.append(int(bit))

    return bits


def get_video_from_youtube(logger: logging.Logger, url: str) -> Optional[str]:
    """
    Given a URL from YouTube, download the video in MP4 format and returns output file name.
    :param logger: Program logger.
    :param url: YouTube URL.
    """

    logger.debug(f'Getting video from YouTube: {url}')

    try:
        video = YouTube(url).streams.get_highest_resolution()
        filename = f'{video.title.replace(" ", "_")}.mp4'
        output_file = f'../mp4/{filename}'
        video.download(os.path.dirname(output_file), filename=filename)

        return output_file
    except Exception as err:
        logger.error(err)
        sys.exit(1)


def get_srt_from_youtube(logger: logging.Logger, url: str, output_file: str, lang: str) -> None:
    """
    Given a URL from YouTube, download the subtitles in SRT format.
    :param logger: Program logger.
    :param url: YouTube URL.
    :param output_file: Output SRT file name.
    :param lang: Subtitle languaje, for example "en", "es", etc.
    """

    logger.debug(f'Getting subtitles from YouTube: {url}')

    try:
        captions = YouTube(url).captions

        if lang in captions:
            caption = captions.get(lang)

            with open(output_file, 'w', encoding='utf-8') as file:
                file.write(caption.generate_srt_captions())
        else:
            logger.error(f'Language "{lang}" not found in subtitles.')

            sys.exit(1)
    except Exception as err:
        logger.error(err)

        sys.exit(1)
